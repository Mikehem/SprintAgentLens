// SprintAgentLens Prisma Schema
// Database schema for enterprise AI observability platform

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================================================

/// User accounts with enterprise authentication features
model User {
  id        String   @id @default(cuid())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(255)
  fullName  String?  @map("full_name") @db.VarChar(100)
  
  // Authentication fields
  passwordHash String  @map("password_hash") @db.VarChar(255)
  salt         String  @db.VarChar(255)
  
  // Account status
  isActive     Boolean @default(true) @map("is_active")
  role         UserRole @default(USER)
  
  // Security tracking
  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  accountLockedUntil  DateTime? @map("account_locked_until")
  lastLoginAt         DateTime? @map("last_login_at")
  
  // Workspace association
  workspaceId String @default("default") @map("workspace_id") @db.VarChar(50)
  
  // Audit fields
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     String?  @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  // Relationships
  sessions    UserSession[]
  auditLogs   UserAuditLog[]
  createdProjects Project[] @relation("ProjectCreator")
  createdDatasets Dataset[] @relation("DatasetCreator")
  updatedDatasets Dataset[] @relation("DatasetUpdater")
  createdDatasetItems DatasetItem[] @relation("DatasetItemCreator")
  updatedDatasetItems DatasetItem[] @relation("DatasetItemUpdater")
  createdExperiments Experiment[] @relation("ExperimentCreator")
  updatedExperiments Experiment[] @relation("ExperimentUpdater")
  
  @@map("users")
  @@index([username])
  @@index([email])
  @@index([workspaceId])
  @@index([isActive])
}

/// User roles for role-based access control
enum UserRole {
  ADMIN
  USER
  VIEWER
  
  @@map("user_role")
}

/// Active user sessions with JWT token management
model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  
  // Session details
  sessionToken String   @unique @map("session_token") @db.VarChar(500)
  refreshToken String?  @map("refresh_token") @db.VarChar(500)
  
  // Session metadata
  ipAddress   String?  @map("ip_address") @db.VarChar(45)
  userAgent   String?  @map("user_agent") @db.Text
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  lastUsedAt  DateTime @default(now()) @map("last_used_at")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
}

/// Security audit log for authentication events
model UserAuditLog {
  id       String   @id @default(cuid())
  userId   String?  @map("user_id")
  
  // Event details
  event       String   @db.VarChar(100)
  eventType   AuditEventType @map("event_type")
  description String?  @db.Text
  
  // Request metadata
  ipAddress   String?  @map("ip_address") @db.VarChar(45)
  userAgent   String?  @map("user_agent") @db.Text
  requestId   String?  @map("request_id") @db.VarChar(100)
  
  // Additional context
  metadata    Json?
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relationships
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("user_audit_log")
  @@index([userId])
  @@index([event])
  @@index([eventType])
  @@index([createdAt])
}

/// Audit event types for security monitoring
enum AuditEventType {
  LOGIN
  LOGOUT
  LOGIN_FAILED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  PASSWORD_CHANGED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  PERMISSION_DENIED
  
  @@map("audit_event_type")
}

// ============================================================================
// PROJECT MANAGEMENT
// ============================================================================

/// Projects for organizing AI experiments and datasets
model Project {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  
  // Workspace association
  workspaceId String @map("workspace_id") @db.VarChar(50)
  
  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  // Relationships
  creator     User     @relation("ProjectCreator", fields: [createdBy], references: [id])
  datasets    Dataset[]
  experiments Experiment[]
  
  @@map("projects")
  @@index([workspaceId])
  @@index([createdBy])
  @@index([name])
}

// ============================================================================
// DATASET MANAGEMENT  
// ============================================================================

/// Datasets for AI model evaluation with workspace isolation
model Dataset {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  
  // Project and workspace association for access control
  projectId   String   @map("project_id")
  workspaceId String   @map("workspace_id") @db.VarChar(50)
  
  // Dataset metadata and configuration
  metadata    Json?    // Stores DatasetMetadata as JSON
  tags        Json?    // Array of string tags
  status      DatasetStatus @default(DRAFT)
  
  // Statistics
  itemCount   Int      @default(0) @map("item_count")
  version     Int      @default(1)
  
  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  // Relationships with access control
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator     User     @relation("DatasetCreator", fields: [createdBy], references: [id])
  updater     User?    @relation("DatasetUpdater", fields: [lastUpdatedBy], references: [id])
  items       DatasetItem[]
  experiments Experiment[]
  
  @@map("datasets")
  @@index([projectId])
  @@index([workspaceId]) // Critical for workspace isolation
  @@index([createdBy])
  @@index([name])
  @@index([status])
}

/// Dataset status for lifecycle management
enum DatasetStatus {
  DRAFT
  READY
  PROCESSING
  ERROR
  ARCHIVED
  DEPRECATED
  
  @@map("dataset_status")
}

/// Dataset items for storing individual data points
model DatasetItem {
  id          String   @id @default(cuid())
  
  // Dataset association
  datasetId   String   @map("dataset_id")
  
  // Item data
  input       Json     // Input data for the item
  expectedOutput Json? @map("expected_output") // Expected output (ground truth)
  metadata    Json?    // DatasetItemMetadata as JSON
  tags        Json?    // Array of string tags
  
  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  // Relationships
  dataset     Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
  creator     User     @relation("DatasetItemCreator", fields: [createdBy], references: [id])
  updater     User?    @relation("DatasetItemUpdater", fields: [lastUpdatedBy], references: [id])
  
  @@map("dataset_items")
  @@index([datasetId])
  @@index([createdBy])
  @@index([createdAt])
}

// ============================================================================
// EXPERIMENT MANAGEMENT
// ============================================================================

/// AI experiments for model evaluation with workspace isolation
model Experiment {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  
  // Project and workspace association for access control
  projectId   String   @map("project_id")
  workspaceId String   @map("workspace_id") @db.VarChar(50)
  datasetId   String?  @map("dataset_id")
  
  // Experiment configuration and metadata
  configuration Json?  // Stores ExperimentConfiguration as JSON
  metadata      Json?  // Stores ExperimentMetadata as JSON
  tags          Json?  // Array of string tags
  status        ExperimentStatus @default(DRAFT)
  progress      Json?  // Stores ExperimentProgress as JSON
  results       Json?  // Stores ExperimentResults as JSON
  
  // Metrics and statistics
  itemCount        Int      @default(0) @map("item_count")
  processedItems   Int      @default(0) @map("processed_items")
  successfulItems  Int      @default(0) @map("successful_items")
  failedItems      Int      @default(0) @map("failed_items")
  averageLatency   Float?   @map("average_latency")
  totalCost        Float?   @map("total_cost")
  
  // Execution timestamps
  startedAt    DateTime? @map("started_at")
  completedAt  DateTime? @map("completed_at")
  
  // Audit fields
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     String   @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  // Relationships with access control
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dataset     Dataset? @relation(fields: [datasetId], references: [id], onDelete: SetNull)
  creator     User     @relation("ExperimentCreator", fields: [createdBy], references: [id])
  updater     User?    @relation("ExperimentUpdater", fields: [lastUpdatedBy], references: [id])
  
  @@map("experiments")
  @@index([projectId])
  @@index([workspaceId]) // Critical for workspace isolation
  @@index([datasetId])
  @@index([createdBy])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
}

/// Experiment status tracking
enum ExperimentStatus {
  DRAFT
  QUEUED
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
  ARCHIVED
  
  @@map("experiment_status")
}

// ============================================================================
// WORKSPACE CONFIGURATIONS
// ============================================================================

/// Workspace configuration settings
model WorkspaceConfiguration {
  id          String   @id @default(cuid())
  workspaceId String   @unique @map("workspace_id") @db.VarChar(50)
  
  // Configuration data
  name        String   @db.VarChar(100)
  description String?  @db.Text
  settings    Json?
  
  // Feature toggles
  features    Json?
  
  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  @@map("workspace_configurations")
}

// ============================================================================
// LLM PROVIDER MANAGEMENT
// ============================================================================

/// LLM provider API key management
model LlmProviderApiKey {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  provider    String   @db.VarChar(50) // openai, anthropic, google, etc.
  
  // Encrypted API key storage
  encryptedKey String  @map("encrypted_key") @db.Text
  keyHash      String  @map("key_hash") @db.VarChar(255)
  
  // Key metadata
  isActive     Boolean @default(true) @map("is_active")
  workspaceId  String  @map("workspace_id") @db.VarChar(50)
  
  // Usage tracking
  lastUsedAt   DateTime? @map("last_used_at")
  usageCount   Int       @default(0) @map("usage_count")
  
  // Audit fields
  createdAt    DateTime @default(now()) @map("created_at")
  createdBy    String   @map("created_by") @db.VarChar(50)
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar(50)
  
  @@map("llm_provider_api_keys")
  @@index([provider])
  @@index([workspaceId])
  @@index([isActive])
}